{% extends "basic-slide.html" %}

{% set title = "How to git?" %}

{% block content %}
{% raw %}

# Why version control?

* Exchange _I'll send you my script via mail._

* Collaboration _Sample File (conflicted copy 2019-11-21)_

* Storing versions (properly) _But it worked yesterday..._ ðŸ˜­

* Understanding what happened _I did not change anything!!11!_ ðŸ¤¬

* Backup _I replaced the wrong my_file_2_final_final.py_ ðŸ˜±

---

# First steps

There are many version control systems out there (e.g. Subversion, Mercurial)

We will focus on Git (`git`) which is the **de facto standard**

--

## As easy as **1, 2, 3**
```bash
cd my_project/
git init .  # Initialize a repository
git add .  # Add the whole directory content
git commit -m "Initial commit"  # Commit your changes
```

--

## That's it!

---

class: middle, center, inverse

# git brother is watching you!

---

# The basic workflow

`git` offers **plenty of functionality** that is extensively "documented"
(_on StackOverflow... you know it's true_)

--

You will only need a **handful of commands** in your day to day work:

```bash
git status  # show which files have changed
```

```bash
git diff my_file  # show what has changed
```

```bash
git add my_file  # stage changes
```

```bash
git commit  # commit your changes
```

---

# Good habits

An **atomic commit** consists of changes related to one task, one logical unit
* Commit **frequently**
* Commit each fix or task as a **separate** change
* Only commit **completed blocks** of work

--

Write **meaningful** commit messages
1. Use the **imperative mood** in the subject line (**what** is done)
1. **Limit** the subject line to 50 characters
1. Use the body to elaborate **why** changes have been
performed

{% endraw %}
{% endblock content %}
